{
	"info": {
		"_postman_id": "3b8132af-be6a-49dd-9a67-4aa15971e7d2",
		"name": "Kirby's Ticket Emporium",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29410460"
	},
	"item": [
		{
			"name": "Registration",
			"item": [
				{
					"name": "Add customer (required fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Operation should be successful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean').and.to.be.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Account was successfully registered\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.equal(\"Your account has been registered!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"user123\",\r\n    \"password\": \"user123\",\r\n    \"name\": \"John Doe\",\r\n    \"email\": \"john_doe@yahoo.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add existing customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Operation should be unsuccessful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean').and.to.be.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"user123\",\r\n    \"password\": \"20ratking03\",\r\n    \"name\": \"Rat King\",\r\n    \"email\": \"ratking@gmail.com\",\r\n    \"address\": \"Partille\",\r\n    \"phoneNumber\": \"0999999999\",\r\n    \"DOB\": \"2004-02-18\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add customer (all fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Operation should be successful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean').and.to.be.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Account was successfully registered\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.equal(\"Your account has been registered!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"ratKing\",\r\n    \"password\": \"20ratking03\",\r\n    \"name\": \"Rat King\",\r\n    \"email\": \"ratking@gmail.com\",\r\n    \"address\": \"Partille\",\r\n    \"phoneNumber\": \"0999999999\",\r\n    \"DOB\": \"2004-02-18\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add organizer (all fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"organizerId\", pm.response.json().username);\r",
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Operation should be successful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean').and.to.be.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Account was successfully registered\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.equal(\"Your account has been registered!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"starEntertainment\",\r\n    \"password\": \"aStarIsB0rn\",\r\n    \"name\": \"Star Entertainment\",\r\n    \"email\": \"star@entertainment.com\",\r\n    \"address\": \"California\",\r\n    \"phoneNumber\": \"0999999666\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/organizers/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add organizer (required fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Operation should be successful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean').and.to.be.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Account was successfully registered\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.equal(\"Your account has been registered!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"graveyardShift\",\r\n    \"password\": \"w3l0ve1t\",\r\n    \"name\": \"Graveyard Shift\",\r\n    \"email\": \"graveyardshiftbusiness@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/organizers/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add existing organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Operation should be unsuccessful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean').and.to.be.equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"graveyardShift\",\r\n    \"password\": \"aaaaaaa\",\r\n    \"name\": \"Fraud Account\",\r\n    \"email\": \"graveyardshiftbusiness@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/organizers/register",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Adding other elements",
			"item": [
				{
					"name": "Add venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.globals.set(\"venueId\", pm.response.json()._id);\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response have all required fields - id, name, capacity, location\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.capacity).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.location).to.exist.and.to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"venue123\",\r\n    \"name\": \"Grand Palace\",\r\n    \"capacity\": \"400\",\r\n    \"location\": \"Gothenburg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/venues",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add existing venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"venue123\",\r\n    \"name\": \"Dolce Vita\",\r\n    \"capacity\": \"1000\",\r\n    \"location\": \"California\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/venues",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add event (all fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"eventId\", pm.response.json().id);\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response have all required fields - id, name, description, date, venue, organizer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    const dateRegex = /\\d{4}(-\\d{2}){2}/;\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.description).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.date).to.exist.and.to.match(dateRegex);\r",
									"    pm.expect(responseData.venue).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.organizer).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"imageURL is a valid URL\", function () {\r",
									"    const urlRegex = /(https:\\/\\/www\\.|http:\\/\\/www\\.|https:\\/\\/|http:\\/\\/)?[a-zA-Z0-9]{2,}(\\.[a-zA-Z0-9]{2,})(\\.[a-zA-Z0-9]{2,})?(\\/[a-zA-Z0-9]{2,})*/;\r",
									"\r",
									"    pm.expect(pm.response.json().imageURL).to.match(urlRegex);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"event123\",\r\n    \"name\": \"Amazing Concert\",\r\n    \"description\": \"The most amazing concert ever!!!\",\r\n    \"ageLimit\": \"18\",\r\n    \"date\": \"2023-06-13\",\r\n    \"venue\": \"{{venueId}}\",\r\n    \"organizer\": \"{{organizerId}}\",\r\n    \"imageURL\": \"https://www.google.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add event (required fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response have all required fields - id, name, description, date, venue, organizer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    const dateRegex = /\\d{4}(-\\d{2}){2}/;\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.description).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.date).to.exist.and.to.match(dateRegex);\r",
									"    pm.expect(responseData.venue).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.organizer).to.exist.and.to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"funeral\",\r\n    \"name\": \"Granny's Pre-Death Pub Crawl\",\r\n    \"description\": \"Party until you drop!\",\r\n    \"date\": \"2090-06-13\",\r\n    \"venue\": \"{{venueId}}\",\r\n    \"organizer\": \"{{organizerId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add existing event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"funeral\",\r\n    \"name\": \"My Funeral\",\r\n    \"description\": \"You are formally invited to my funeral.\",\r\n    \"date\": \"2090-06-13\",\r\n    \"venue\": \"{{venueId}}\",\r\n    \"organizer\": \"{{organizerId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add ticket (all fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response have all required fields - id, price, quantity, event\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.price).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.quantity).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.event).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Seat number should be a String\", function () {\r",
									"    pm.expect(pm.response.json().seat).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"ticket123\",\r\n    \"seat\": \"12A\",\r\n    \"price\": \"234\",\r\n    \"quantity\": \"350\",\r\n    \"event\": \"{{eventId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/events/{{eventId}}/tickets",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"{{eventId}}",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add ticket (required fields)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response have all required fields - id, price, quantity, event\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.price).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.quantity).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.event).to.exist.and.to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"omgTicket\",\r\n    \"price\": \"5000\",\r\n    \"quantity\": \"3\",\r\n    \"event\": \"{{eventId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/events/{{eventId}}/tickets",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"{{eventId}}",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add existing ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"omgTicket\",\r\n    \"price\": \"5000\",\r\n    \"quantity\": \"3\",\r\n    \"event\": \"{{eventId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/events/{{eventId}}/tickets",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"{{eventId}}",
								"tickets"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Operation should be successful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean').and.to.be.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Login was successful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.equal(\"Authentication successful\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"ratKing\",\r\n    \"password\": \"20ratking03\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login customer (failed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Operation should be unsuccessful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean').and.to.be.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Login was unsuccessful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.equal(\"Username or password incorrect\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"ratKing\",\r\n    \"password\": \"i forgot lol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Operation should be successful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean').and.to.be.equal(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Login was successful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.equal(\"Authentication successful\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"star@entertainment.com\",\r\n    \"password\": \"aStarIsB0rn\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/organizers/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login organizer (failed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Operation should be unsuccessful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.success).to.exist.and.to.be.a('boolean').and.to.be.equal(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Login was unsuccessful\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.equal(\"Email or password incorrect\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"uhh what's our company email\",\r\n    \"password\": \"aStarIsB0rn\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/organizers/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET",
			"item": [
				{
					"name": "All customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  pm.expect(responseData).to.have.lengthOf.at.least(1, \"Array should have at least one element\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/customers",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/ratKing",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"ratKing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				},
				{
					"name": "All organizers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  pm.expect(responseData).to.have.lengthOf.at.least(1, \"Array should have at least one element\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v1/organizers",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v1/organizers/starEntertainment",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"starEntertainment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizer not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/organizers/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				},
				{
					"name": "All venues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array with at least one element\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  pm.expect(responseData).to.have.lengthOf.at.least(1, \"Array should have at least one element\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/venues",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v1/venues/venue123",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"venues",
								"venue123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Venue not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/venues/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"venues",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				},
				{
					"name": "All events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array with at least one element\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  pm.expect(responseData).to.have.lengthOf.at.least(1, \"Array should have at least one element\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v1/events/event123",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"event123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/events/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				},
				{
					"name": "All tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array with at least one element\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  pm.expect(responseData).to.have.lengthOf.at.least(1, \"Array should have at least one element\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/events/{{eventId}}/tickets",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"{{eventId}}",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/v1/events/{{eventId}}/tickets/ticket123",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"{{eventId}}",
								"tickets",
								"ticket123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ticket not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/events/{{eventId}}/tickets/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"{{eventId}}",
								"tickets",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "Specific customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Username must exist and be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Name must exist and be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Email must exist and be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid email format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Value should be in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Phone number has 10 digits\", function () {",
									"    const responseData = pm.response.json();",
									"    const phoneRegex = /\\d{10}/;",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.phoneNumber).to.match(phoneRegex, \"Value should be in a valid format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"user123\",\r\n    \"name\": \"Jane Doe\",\r\n    \"email\": \"janedoe@gmail.com\",\r\n    \"phoneNumber\": \"0888444333\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/user123",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"user123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"MEGAPOWER\",\r\n    \"name\": \"Biggest Superhero\",\r\n    \"email\": \"mega@power.com\",\r\n    \"address\": \"Multiverse\",\r\n    \"phoneNumber\": \"6\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Username must exist and be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Name must exist and be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"pm.test(\"Email must exist and be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid email format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Value should be in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Phone number has 10 digits\", function () {",
									"    const responseData = pm.response.json();",
									"    const phoneRegex = /\\d{10}/;",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.phoneNumber).to.match(phoneRegex, \"Value should be in a valid format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"graveyardShift\",\r\n    \"name\": \"FUNeral Home\",\r\n    \"email\": \"fun@yahoo.com\",\r\n    \"address\": \"Tristate Area\",\r\n    \"phoneNumber\": \"9090909090\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/organizers/graveyardShift",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"graveyardShift"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizer not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"MEGAPOWER\",\r\n    \"email\": \"mega@power.com\",\r\n    \"address\": \"Multiverse\",\r\n    \"phoneNumber\": \"0793552222\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/organizers/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PATCH",
			"item": [
				{
					"name": "Specific customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": \"The Best Place on the Planet\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/ratKing",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"ratKing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"fairyfarms@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Tester\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/organizers/starEntertainment",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"starEntertainment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizer not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"mega@power.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/organizers/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "All customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/customers",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/ratKing",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"ratKing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/customers/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				},
				{
					"name": "All organizers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/organizers",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1/organizers/starEntertainment",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"starEntertainment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizer not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/organizers/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"organizers",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				},
				{
					"name": "All venues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/venues",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/venues/venue123",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"venues",
								"venue123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Venue not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/venues/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"venues",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				},
				{
					"name": "All events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/events/event123",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"event123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/events/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				},
				{
					"name": "All tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/events/{{eventId}}/tickets/all",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"{{eventId}}",
								"tickets",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "All tickets for an event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/events/{{eventId}}/tickets",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"{{eventId}}",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific ticket for an event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/events/{{eventId}}/tickets/ticket123",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"{{eventId}}",
								"tickets",
								"ticket123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ticket not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1/events/{{eventId}}/tickets/MEGAPOWER",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"events",
								"{{eventId}}",
								"tickets",
								"MEGAPOWER"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:3000"
		}
	]
}